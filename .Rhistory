#save as a martix for instant mortality at different ages
MortalityVaried <- matrix(compute_varied_mortality(t = 1:29,Minf=Minf), ncol = 1)
#check works out to average instant mortality
colSums(MortalityVaried)/maxage
#Create a survival rates matrix by converting instant nat mortality (MortalityVaried) to discrete
Survival <- exp(-MortalityVaried)
#calculate alpha and beta for the Beverton Holt function.
#STEP 1: Calculate equilibrium numbers
#create a storage matrix for equilibrium population distribution
equilib <- matrix(0,nrow=maxage,ncol=1)
#Calc numbers in each age classes at equilibrium
#assuming natural mortality is constant, and no fishing ---
#sum of Geometric sequence =a(1-r^n)/(1-r)
for (i in 2:maxage) {
equilib[1,1] <- R0
equilib[i,1] <- equilib[i-1,1]*(Survival[[i-1]])
}
#STEP 2: convert to biomass of each stage at equilibrium
Bequilib <- equilib*Wt
#STEP 3: calculate the total reproductive biomass at equilibrium:
Sequilib <- sum(Bequilib[aMat:maxage])
#STEP 4: Using known equations from Walters 2006, calculate alpha and beta for the bev holt fn --moved to BolboModel
alpha <- CR * R0/Sequilib
beta <- (CR-1)/Sequilib
##Create storage arrays for the matrices in the for loops
##build a storage array for all years of the abundance (Nt) and Recruitment (Rt)
Nt <- matrix(0, nrow=maxage, ncol=nYears+1) #abundance at time t in numbers
Rt <- matrix(0, nrow=nYears+1, ncol=1) #recruits at time t in numbers
Ft <- matrix(0,nrow=maxage,ncol=nYears+1) #fishing at time t in numbers
Over_aMat <- matrix(0,nrow=(maxage-aMat+1),ncol=nYears+1) #number of adult fish at time t
Over_twos <- matrix(0,nrow=(maxage-1),ncol=nYears+1) #number of fish aged 2+ at time t
#Create a zeros matrix for the max function to compare with later, so fishing does not become negative
Zeros <- matrix(0, nrow=28,ncol=1)
#storage arrays for biomass
SpawnerBiom <- matrix(0,nrow=1,ncol=nYears+1) #biomass of spawners
FishingBiom_t <- matrix(0,nrow=1,ncol=nYears+1) #biomass of fish within 'fishable' size
Harvest_t <- matrix(0,nrow=29,ncol=nYears+1) #harvest at time t in biomass
Biomass <- matrix(0,nrow=29,ncol=nYears+1) # overall biomass
Ht <- matrix(0,nrow=29,ncol=nYears+1) #harvest at time t in biomass
#Percentage change in population from t=1 to t
PopChangePercent <- matrix(0,nrow=1,ncol=nYears+1) #biomass of spawners
#Set t=0 abundance
Nt[,1] <- N18
##Running loops
for(t in 2:(nYears+1)){ #run for the number of years
Biomass[,t-1] <- Nt[1:maxage,t-1]* Wt[1:maxage,1] #calc biomass of fish in each age class
SpawnerBiom[1,t-1] <- sum(Biomass[aMat:maxage,t-1]) #calc biomass of spawners
Rt[t-1,1] <- 0.65*alpha * (1-Habitat_loss) * SpawnerBiom[1,t-1]/(1+beta*SpawnerBiom[1,t-1]) ##calculate the recruits produced -- multiply by 0.65 to get females only!
Nt[1,t] <- Rt[t-1,1] #insert recruits into Nt row 1 for age 1
FishingBiom_t[1,t-1] <- sum(Biomass[min_age_at_fishing:maxage,t-1]) #calc fishable biomass (where min_age_at_fishing is the minimum capture age)
#Calculate how many fish were caught in each age class
#to distribute fishing, the biomass of caught fish will be distributed in the same
#proportions as biomass of 'fishable' fish
##example. 20kg of fish are caught. there are 50kg of fish. 5kg of the fish (10%) are aged 7. So 20kg*10%=2kg of fish aged 7.
#therefore:
if (FishingBiom_t[1,t-1]>0){ ##set up if loop as can't divide by 0 as would be the case is fishing biomass=0
Ft[min_age_at_fishing:maxage,t-1] <- (FishedBiomass*(Biomass[min_age_at_fishing:maxage,t-1]
/FishingBiom_t[1,t-1])/Wt[min_age_at_fishing:maxage,1]) #calcualate the proportion fished from each age class -- divide by wt to convert back to numbers
} else {
Ft[(min_age_at_fishing-1):28,t-1] <-0 #if there was nothing within the "fishable" biomass to catch, they catch nothing.
}
#calc Nt - fishing (minusing as hyperstable)
Nt[2:29,t] <- pmax(Zeros,((Nt[1:28,t-1]-Ft[1:28,t-1])* Survival[1:28,1]))  #take Nt-fishing, then multiply by survival. If any value is less than 0, take 0 instead.
#NOTE: Assumes fish over 29 years die
#calculate amount of fish caught
for(a in min_age_at_fishing:maxage){
if (Ft[a-1,t-1] < (Nt[a-1,t-1])) { #if the amount being fished is less than the population at time t
Ht[a-1,t-1] <- Ft[a-1,t-1]  #then they catch the desired amount
} else { #if the population is less than the target catch
Ht[a-1,t-1] <- (Nt[a-1,t-1]) #they catch all the fish in that age class
}
##outputs:
Over_aMat[,t-1] <- Nt[aMat:maxage,t-1] #provide the number of individuals aged over aMat as an output
Over_twos[,t-1] <- Nt[2:maxage,t-1] #provide the number of individuals ages over 2 as an output
#calculate the % change in population from starting year to current year
if (sum(Biomass[1:maxage,t-1])>0){
PopChangePercent[1,t-1] <- (sum(Biomass[1:maxage,t-1])/sum(Biomass[1:maxage,1])-1)*100 #calc biomass of spawners
} else {
PopChangePercent[1,t-1] <- -100
}
}
}
#calculate totals from variables that were divided by age class
BiomassTotal <- colSums(Biomass) #calculate total biomass
MatureFish <- colSums(Over_aMat) #calculate number of sexually mature fish
DispersedAdults <- colSums(Over_twos)/dispersal  #calculate number of fish aged 2+
IUCN <- colSums(PopChangePercent) #fixes formatting for export
#This defines what outputs to provide from the function:
datreturn <- data.frame(FishedBiomass = FishedBiomass,
Habitat_loss = Habitat_loss,
t = 1:(nYears+1),
BiomassTotal=BiomassTotal,
DispersedAdults=DispersedAdults,
MatureFish=MatureFish,
min_age_at_fishing=min_age_at_fishing,
aMat=aMat,
R0=R0,
CR=CR,
mr=mr,
IUCN=IUCN
)
#Return a list that includes the datreturn data, the population (Nt), and the harvest
return(list(datreturn = datreturn, Nt = Nt, Harvest_t = Harvest_t))
}
library(ggplot2)
library(tidyverse)
#set up input for sensitivity - things  vary across each run
data_in <- expand.grid(frates = c(seq(0, 500, length.out = 11),325),
hab_loss = seq(0, 1, length.out = 11),
min_age = c(2,7,8,9,10,11,12),
age_at_maturity = c(6,7,8,9,10),
CR = c(10,20,30,40,50),
mr = c(seq(0.1, 0.2, length.out = 6),0.169),
R0 = c(2000))
data_in <- expand.grid(frates = c(seq(0, 500, length.out = 11)),
hab_loss = seq(0, 1, length.out = 11),
min_age = c(2, 7,8,9,10,11,12),
age_at_maturity = c(7),
CR = c(10),
mr = c(seq(0.1, 0.2, length.out = 2)),
R0 = c(2000))
irows <- 1:nrow(data_in)
#2000 start point
#run the model for combinations of each variable, defined in data_in. Output will be
#dat.return (from section 3) in point 1, Nt in point 2, and harvest in point 3.
ModelOutput_2001 <- lapply(irows, function(i) {runmodel(data_in$frates[i],
data_in$hab_loss[i],
data_in$min_age[i],
data_in$age_at_maturity[i],
data_in$CR[i],
data_in$mr[i],
data_in$R0[i])})
#Check
length(ModelOutput_2001)
##Masters Thesis Script - Logistic growth B. muricatum
##Rachael Brock, 3/8/21
#Load Packages
library(tidyverse)
#load data from Roviana lagoon
size_freq <- as.matrix(read_csv("Data/size_freq_table.csv"))
#set initial abundance per size class.
#60-70% of population are female, so multiply by 0.65
##Surveyed 72 sites at 500m*20m = 720,000m^2 --> multiply by 100/72 to get km^2.
N0 <- size_freq[,4]*0.65*100/72 #abundance in 2000/2001
N18 <-size_freq[,5]*0.65*100/27 #abundance in 2018
nYears <- 100 #number of years to run
min_age_at_fishing <- 7 #min age at fishing capture
maxage <- 29 #maximum age
R0 <- 2000 #Maximum observed number of recruits per km2 - calculated using data provided by R. Hamilton from surveys in Kia, Solomon Islands
aMat <- 7 #age at sexual maturity
mr <- 0.169 ##instantaneous natural mortality estimate
CR <- 10 #Goodyear compensation ratio estimate
dispersal <- 4.7 #The ratio of adult:juvenile habitat observed in Kia. Using as a baseline to account for adults dispersing into outer reef from juvenile zones
FishedBiomass <-  20365/16*12*0.96/177*0.65 #baseline estimate of fished biomass using Kia data. 20,365kg caught over 16 months (16/12) where 96% were B muri, and 65% are female
save(N0, N18, nYears, min_age_at_fishing, maxage,
aMat, rf, mr, CR, FishedBiomass, file="Data/BMuri_life_parameters.RDA") ##RDA is for multiple objects, RDS for one
##Masters Thesis Script - Logistic growth B. muricatum
##Rachael Brock, 3/8/21
#SCRIPT 2: script creates the matrices and calculates constants using defined values from 1-Bolbo-Parameters.
#Calculate weight at ages for biomasses
#STEP 1: Calculate legnths at each age using *female* life parameters from Taylor et al. (2018)
# Linf = max size
# k is the coefficient in growth function
# t0 is the hypothetical age at 0mm.
compute_lt <- function(t, Linf = 1047, k = 0.150, t0 = 0.102) {
Linf *(1-exp(-k*(t-t0)))
}
Lt <- matrix(compute_lt(t = 1:29), ncol = 1)     #store the length values at each age in a matrix
plot(Lt) #check
#STEP 2: Calculate weight for each age - using female equation from taylor 2018 -- in kg!!
#W=a*[TL]^b
Wt <- matrix(0, nrow=maxage, ncol=1)
for (t in 1:29) {
a <- 3.469 * 10^(-6)
b <- 3.246
Wt[t,] <- a/1000*Lt[t,]^b
}
plot(Wt) #check
##Masters Thesis Script - Logistic growth B. muricatum
##Rachael Brock, 3/8/21
#SCRIPT 3: The script writes a function for the model with 2000/2001 abundance.
runmodel <- function(FishedBiomass = 0, Habitat_loss = 0, min_age_at_fishing=7, aMat =7, CR=10, mr=0.169, R0=400){
#calculate age specific mortality using paper Age-specific natural mortality rates in stock assessments:
#size-based vs. density-dependent Joseph E. Powers
#Calculate natural mortality at max size (Minf)
#can estimate using average instant nat mortality (rm) by using equation:
#mortality at time t (Mt) = Minf(1-exp((-k*(a-t0)))^(-b*0.305)
#Therefore: Minf = max age * mr/[(sum for age 1 to max age)(1-exp(-k*(a-t0)))^(-b*0.305)]
#STEP 1: first compute the sigma part of the equation (within square brackets above) using a fn
compute_Minf <- function(a, mr=0.169, k=0.150, t0=0.102, b=3.246, maxage=29){
(1-exp(-k*(a-t0)))^(-b*0.305)
}
#STEP 2: then calc Minf by taking the sum
Minf <- maxage*mr/colSums(matrix(compute_Minf(a=1:29),ncol=1))
#STEP 3: now using the Minf value, calc varied mortality using equation (Mt) = Minf(1-exp((-k*(a-t0)))^(-b*0.305)
compute_varied_mortality <- function(t, Minf, k=0.150, t0=0.102, b=3.246) {
Minf *(1-exp(-k*(t-t0)))^(-b*0.305)
}
#save as a martix for instant mortality at different ages
MortalityVaried <- matrix(compute_varied_mortality(t = 1:29,Minf=Minf), ncol = 1)
#check works out to average instant mortality
colSums(MortalityVaried)/maxage
#Create a survival rates matrix by converting instant nat mortality (MortalityVaried) to discrete
Survival <- exp(-MortalityVaried)
#calculate alpha and beta for the Beverton Holt function.
#STEP 1: Calculate equilibrium numbers
#create a storage matrix for equilibrium population distribution
equilib <- matrix(0,nrow=maxage,ncol=1)
#Calc numbers in each age classes at equilibrium
#assuming natural mortality is constant, and no fishing ---
#sum of Geometric sequence =a(1-r^n)/(1-r)
for (i in 2:maxage) {
equilib[1,1] <- R0
equilib[i,1] <- equilib[i-1,1]*(Survival[[i-1]])
}
#STEP 2: convert to biomass of each stage at equilibrium
Bequilib <- equilib*Wt
#STEP 3: calculate the total reproductive biomass at equilibrium:
Sequilib <- sum(Bequilib[aMat:maxage])
#STEP 4: Using known equations from Walters 2006, calculate alpha and beta for the bev holt fn --moved to BolboModel
alpha <- CR * R0/Sequilib
beta <- (CR-1)/Sequilib
##Create storage arrays for the matrices in the for loops
##build a storage array for all years of the abundance (Nt) and Recruitment (Rt)
Nt <- matrix(0, nrow=maxage, ncol=nYears+1) #abundance at time t in numbers
Rt <- matrix(0, nrow=nYears+1, ncol=1) #recruits at time t in numbers
Ft <- matrix(0,nrow=maxage,ncol=nYears+1) #fishing at time t in numbers
Over_aMat <- matrix(0,nrow=(maxage-aMat+1),ncol=nYears+1) #number of adult fish at time t
Over_twos <- matrix(0,nrow=(maxage-1),ncol=nYears+1) #number of fish aged 2+ at time t
#Create a zeros matrix for the max function to compare with later, so fishing does not become negative
Zeros <- matrix(0, nrow=28,ncol=1)
#storage arrays for biomass
SpawnerBiom <- matrix(0,nrow=1,ncol=nYears+1) #biomass of spawners
FishingBiom_t <- matrix(0,nrow=1,ncol=nYears+1) #biomass of fish within 'fishable' size
Harvest_t <- matrix(0,nrow=29,ncol=nYears+1) #harvest at time t in biomass
Biomass <- matrix(0,nrow=29,ncol=nYears+1) # overall biomass
Ht <- matrix(0,nrow=29,ncol=nYears+1) #harvest at time t in biomass
#Percentage change in population from t=1 to t
PopChangePercent <- matrix(0,nrow=1,ncol=nYears+1) #biomass of spawners
#Set t=0 abundance
Nt[,1] <- N0
##Running loops
for(t in 2:(nYears+1)){ #run for the number of years
Biomass[,t-1] <- Nt[1:maxage,t-1]* Wt[1:maxage,1] #calc biomass of fish in each age class
SpawnerBiom[1,t-1] <- sum(Biomass[aMat:maxage,t-1]) #calc biomass of spawners
Rt[t-1,1] <- 0.65*alpha * (1-Habitat_loss) * SpawnerBiom[1,t-1]/(1+beta*SpawnerBiom[1,t-1]) ##calculate the recruits produced -- multiply by 0.65 to get females only!
Nt[1,t] <- Rt[t-1,1] #insert recruits into Nt row 1 for age 1
FishingBiom_t[1,t-1] <- sum(Biomass[min_age_at_fishing:maxage,t-1]) #calc fishable biomass (where min_age_at_fishing is the minimum capture age)
#Calculate how many fish were caught in each age class
#to distribute fishing, the biomass of caught fish will be distributed in the same
#proportions as biomass of 'fishable' fish
##example. 20kg of fish are caught. there are 50kg of fish. 5kg of the fish (10%) are aged 7. So 20kg*10%=2kg of fish aged 7.
#therefore:
if (FishingBiom_t[1,t-1]>0){ ##set up if loop as can't divide by 0 as would be the case is fishing biomass=0
Ft[min_age_at_fishing:maxage,t-1] <- (FishedBiomass*(Biomass[min_age_at_fishing:maxage,t-1]
/FishingBiom_t[1,t-1])/Wt[min_age_at_fishing:maxage,1]) #calcualate the proportion fished from each age class -- divide by wt to convert back to numbers
} else {
Ft[(min_age_at_fishing-1):28,t-1] <-0 #if there was nothing within the "fishable" biomass to catch, they catch nothing.
}
#calc Nt - fishing (minusing as hyperstable)
Nt[2:29,t] <- pmax(Zeros,((Nt[1:28,t-1]-Ft[1:28,t-1])* Survival[1:28,1]))  #take Nt-fishing, then multiply by survival. If any value is less than 0, take 0 instead.
#NOTE: Assumes fish over 29 years die
#calculate amount of fish caught
for(a in min_age_at_fishing:maxage){
if (Ft[a-1,t-1] < (Nt[a-1,t-1])) { #if the amount being fished is less than the population at time t
Ht[a-1,t-1] <- Ft[a-1,t-1]  #then they catch the desired amount
} else { #if the population is less than the target catch
Ht[a-1,t-1] <- (Nt[a-1,t-1]) #they catch all the fish in that age class
}
##outputs:
Over_aMat[,t-1] <- Nt[aMat:maxage,t-1] #provide the number of individuals aged over aMat as an output
Over_twos[,t-1] <- Nt[2:maxage,t-1] #provide the number of individuals ages over 2 as an output
#calculate the % change in population from starting year to current year
if (sum(Biomass[1:maxage,t-1])>0){
PopChangePercent[1,t-1] <- (sum(Biomass[1:maxage,t-1])/sum(Biomass[1:maxage,1])-1)*100 #calc biomass of spawners
} else {
PopChangePercent[1,t-1] <- -100
}
}
}
#calculate totals from variables that were divided by age class
BiomassTotal <- colSums(Biomass) #calculate total biomass
MatureFish <- colSums(Over_aMat)/dispersal #calculate number of sexually mature fish
DispersedAdults <- colSums(Over_twos)/dispersal  #calculate number of fish aged 2+
IUCN <- colSums(PopChangePercent) #fixes formatting for export
#This defines what outputs to provide from the function:
datreturn <- data.frame(FishedBiomass = FishedBiomass,
Habitat_loss = Habitat_loss,
t = 1:(nYears+1),
BiomassTotal=BiomassTotal,
DispersedAdults=DispersedAdults,
MatureFish=MatureFish,
min_age_at_fishing=min_age_at_fishing,
aMat=aMat,
R0=R0,
CR=CR,
mr=mr,
IUCN=IUCN
)
#Return a list that includes the datreturn data, the population (Nt), and the harvest
return(list(datreturn = datreturn, Nt = Nt, Harvest_t = Harvest_t))
}
##Masters Thesis Script - Logistic growth B. muricatum
##Rachael Brock, 3/8/21
#SCRIPT 4: The script writes a function for the model with 2018 abundance.
runmodel2018 <- function(FishedBiomass = 0, Habitat_loss = 0, min_age_at_fishing=7, aMat =7, CR=10, mr=0.169, R0=400){
#calculate age specific mortality using paper Age-specific natural mortality rates in stock assessments:
#size-based vs. density-dependent Joseph E. Powers
#Calculate natural mortality at max size (Minf)
#can estimate using average instant nat mortality (rm) by using equation:
#mortality at time t (Mt) = Minf(1-exp((-k*(a-t0)))^(-b*0.305)
#Therefore: Minf = max age * mr/[(sum for age 1 to max age)(1-exp(-k*(a-t0)))^(-b*0.305)]
#STEP 1: first compute the sigma part of the equation (within square brackets above) using a fn
compute_Minf <- function(a, mr=0.169, k=0.150, t0=0.102, b=3.246, maxage=29){
(1-exp(-k*(a-t0)))^(-b*0.305)
}
#STEP 2: then calc Minf by taking the sum
Minf <- maxage*mr/colSums(matrix(compute_Minf(a=1:29),ncol=1))
#STEP 3: now using the Minf value, calc varied mortality using equation (Mt) = Minf(1-exp((-k*(a-t0)))^(-b*0.305)
compute_varied_mortality <- function(t, Minf, k=0.150, t0=0.102, b=3.246) {
Minf *(1-exp(-k*(t-t0)))^(-b*0.305)
}
#save as a martix for instant mortality at different ages
MortalityVaried <- matrix(compute_varied_mortality(t = 1:29,Minf=Minf), ncol = 1)
#check works out to average instant mortality
colSums(MortalityVaried)/maxage
#Create a survival rates matrix by converting instant nat mortality (MortalityVaried) to discrete
Survival <- exp(-MortalityVaried)
#calculate alpha and beta for the Beverton Holt function.
#STEP 1: Calculate equilibrium numbers
#create a storage matrix for equilibrium population distribution
equilib <- matrix(0,nrow=maxage,ncol=1)
#Calc numbers in each age classes at equilibrium
#assuming natural mortality is constant, and no fishing ---
#sum of Geometric sequence =a(1-r^n)/(1-r)
for (i in 2:maxage) {
equilib[1,1] <- R0
equilib[i,1] <- equilib[i-1,1]*(Survival[[i-1]])
}
#STEP 2: convert to biomass of each stage at equilibrium
Bequilib <- equilib*Wt
#STEP 3: calculate the total reproductive biomass at equilibrium:
Sequilib <- sum(Bequilib[aMat:maxage])
#STEP 4: Using known equations from Walters 2006, calculate alpha and beta for the bev holt fn --moved to BolboModel
alpha <- CR * R0/Sequilib
beta <- (CR-1)/Sequilib
##Create storage arrays for the matrices in the for loops
##build a storage array for all years of the abundance (Nt) and Recruitment (Rt)
Nt <- matrix(0, nrow=maxage, ncol=nYears+1) #abundance at time t in numbers
Rt <- matrix(0, nrow=nYears+1, ncol=1) #recruits at time t in numbers
Ft <- matrix(0,nrow=maxage,ncol=nYears+1) #fishing at time t in numbers
Over_aMat <- matrix(0,nrow=(maxage-aMat+1),ncol=nYears+1) #number of adult fish at time t
Over_twos <- matrix(0,nrow=(maxage-1),ncol=nYears+1) #number of fish aged 2+ at time t
#Create a zeros matrix for the max function to compare with later, so fishing does not become negative
Zeros <- matrix(0, nrow=28,ncol=1)
#storage arrays for biomass
SpawnerBiom <- matrix(0,nrow=1,ncol=nYears+1) #biomass of spawners
FishingBiom_t <- matrix(0,nrow=1,ncol=nYears+1) #biomass of fish within 'fishable' size
Harvest_t <- matrix(0,nrow=29,ncol=nYears+1) #harvest at time t in biomass
Biomass <- matrix(0,nrow=29,ncol=nYears+1) # overall biomass
Ht <- matrix(0,nrow=29,ncol=nYears+1) #harvest at time t in biomass
#Percentage change in population from t=1 to t
PopChangePercent <- matrix(0,nrow=1,ncol=nYears+1) #biomass of spawners
#Set t=0 abundance
Nt[,1] <- N18
##Running loops
for(t in 2:(nYears+1)){ #run for the number of years
Biomass[,t-1] <- Nt[1:maxage,t-1]* Wt[1:maxage,1] #calc biomass of fish in each age class
SpawnerBiom[1,t-1] <- sum(Biomass[aMat:maxage,t-1]) #calc biomass of spawners
Rt[t-1,1] <- 0.65*alpha * (1-Habitat_loss) * SpawnerBiom[1,t-1]/(1+beta*SpawnerBiom[1,t-1]) ##calculate the recruits produced -- multiply by 0.65 to get females only!
Nt[1,t] <- Rt[t-1,1] #insert recruits into Nt row 1 for age 1
FishingBiom_t[1,t-1] <- sum(Biomass[min_age_at_fishing:maxage,t-1]) #calc fishable biomass (where min_age_at_fishing is the minimum capture age)
#Calculate how many fish were caught in each age class
#to distribute fishing, the biomass of caught fish will be distributed in the same
#proportions as biomass of 'fishable' fish
##example. 20kg of fish are caught. there are 50kg of fish. 5kg of the fish (10%) are aged 7. So 20kg*10%=2kg of fish aged 7.
#therefore:
if (FishingBiom_t[1,t-1]>0){ ##set up if loop as can't divide by 0 as would be the case is fishing biomass=0
Ft[min_age_at_fishing:maxage,t-1] <- (FishedBiomass*(Biomass[min_age_at_fishing:maxage,t-1]
/FishingBiom_t[1,t-1])/Wt[min_age_at_fishing:maxage,1]) #calcualate the proportion fished from each age class -- divide by wt to convert back to numbers
} else {
Ft[(min_age_at_fishing-1):28,t-1] <-0 #if there was nothing within the "fishable" biomass to catch, they catch nothing.
}
#calc Nt - fishing (minusing as hyperstable)
Nt[2:29,t] <- pmax(Zeros,((Nt[1:28,t-1]-Ft[1:28,t-1])* Survival[1:28,1]))  #take Nt-fishing, then multiply by survival. If any value is less than 0, take 0 instead.
#NOTE: Assumes fish over 29 years die
#calculate amount of fish caught
for(a in min_age_at_fishing:maxage){
if (Ft[a-1,t-1] < (Nt[a-1,t-1])) { #if the amount being fished is less than the population at time t
Ht[a-1,t-1] <- Ft[a-1,t-1]  #then they catch the desired amount
} else { #if the population is less than the target catch
Ht[a-1,t-1] <- (Nt[a-1,t-1]) #they catch all the fish in that age class
}
##outputs:
Over_aMat[,t-1] <- Nt[aMat:maxage,t-1] #provide the number of individuals aged over aMat as an output
Over_twos[,t-1] <- Nt[2:maxage,t-1] #provide the number of individuals ages over 2 as an output
#calculate the % change in population from starting year to current year
if (sum(Biomass[1:maxage,t-1])>0){
PopChangePercent[1,t-1] <- (sum(Biomass[1:maxage,t-1])/sum(Biomass[1:maxage,1])-1)*100 #calc biomass of spawners
} else {
PopChangePercent[1,t-1] <- -100
}
}
}
#calculate totals from variables that were divided by age class
BiomassTotal <- colSums(Biomass) #calculate total biomass
MatureFish <- colSums(Over_aMat) #calculate number of sexually mature fish
DispersedAdults <- colSums(Over_twos)/dispersal  #calculate number of fish aged 2+
IUCN <- colSums(PopChangePercent) #fixes formatting for export
#This defines what outputs to provide from the function:
datreturn <- data.frame(FishedBiomass = FishedBiomass,
Habitat_loss = Habitat_loss,
t = 1:(nYears+1),
BiomassTotal=BiomassTotal,
DispersedAdults=DispersedAdults,
MatureFish=MatureFish,
min_age_at_fishing=min_age_at_fishing,
aMat=aMat,
R0=R0,
CR=CR,
mr=mr,
IUCN=IUCN
)
#Return a list that includes the datreturn data, the population (Nt), and the harvest
return(list(datreturn = datreturn, Nt = Nt, Harvest_t = Harvest_t))
}
l
l
library(ggplot2)
library(tidyverse)
data_in <- expand.grid(frates = c(seq(0, 500, length.out = 3)),
hab_loss = seq(0, 1, length.out = 3),
min_age = c(2),
age_at_maturity = c(7),
CR = c(10),
mr = c(seq(0.1, 0.2, length.out = 2)),
R0 = c(2000))
irows <- 1:nrow(data_in)
#2000 start point
#run the model for combinations of each variable, defined in data_in. Output will be
#dat.return (from section 3) in point 1, Nt in point 2, and harvest in point 3.
ModelOutput_2001 <- lapply(irows, function(i) {runmodel(data_in$frates[i],
data_in$hab_loss[i],
data_in$min_age[i],
data_in$age_at_maturity[i],
data_in$CR[i],
data_in$mr[i],
data_in$R0[i])})
#Check
length(ModelOutput_2001)
#Extract just data from dat.return by taking the first item in ModelOutput_2001
model_results <- lapply(ModelOutput_2001, function(x) x[[1]])
# Bind list object together into a dataframe
model_results <- bind_rows(model_results)
model_results <- filter(model_results, t<=100)
##2018 start point
ModelOutput_2018 <- lapply(irows, function(i) {runmodel2018(data_in$frates[i],
data_in$hab_loss[i],
data_in$min_age[i],
data_in$age_at_maturity[i],
data_in$CR[i],
data_in$mr[i],
data_in$R0[i])})
#Check
length(ModelOutput_2018)
#Extract just data from dat.return by taking the first item in ModelOutput_2001
model_results2018 <- lapply(ModelOutput_2018, function(x) x[[1]])
# Bind list object together into a dataframe
model_results2018 <- bind_rows(model_results2018)
model_results2018 <- filter(model_results2018, t<=100)
save(model_results2018, file="Data/BMuri_2018results_.RDA") ##RDA is for multiple objects, RDS for one
#Figure 13: Overall trends -- REDO
#scenario 1: bad h + low fish
Fishing_habitat_rm <- filter(model_results, aMat == 7, t<100, Habitat_loss==0.8, CR==10,
min_age_at_fishing ==2, FishedBiomass==0) ##restricting which inputs from the spawner biomasses vector, then plot my filtered data!
#scenario 2: bad h + high fish
Fishing_habitat_rm <- filter(model_results, aMat == 7, t<100, Habitat_loss==0.8, CR==10,
min_age_at_fishing ==2, FishedBiomass==300) ##restricting which inputs from the spawner biomasses vector, then plot my filtered data!
#scenario 3: good h + low fish
Fishing_habitat_rm <- filter(model_results, aMat == 7, t<100, Habitat_loss==0.2, CR==10,
min_age_at_fishing ==2, FishedBiomass==0) ##restricting which inputs from the spawner biomasses vector, then plot my filtered data!
#scenario 4: good h + high fish
Fishing_habitat_rm <- filter(model_results, aMat == 7, t<100, Habitat_loss==0.2, CR==10,
min_age_at_fishing ==2, FishedBiomass==300) ##restricting which inputs from the spawner biomasses vector, then plot my filtered data!
#Fishing --> Habitat + rm
ggplot(Fishing_habitat_rm) + #plot the data from model_results
aes(x = t, y = BiomassTotal, color=factor(mr)) + #factor: makes the data discrete (grouped) not continuous--choose what the x and y axis is
#facet_grid(Habitat_loss ~ FishedBiomass) + #add another element (the facet grid)
theme_bw()+
geom_line() +
#geom_point(aes(x=18, y=948), colour="blue") + ##add the starting biomass
#geom_point(aes(x=0, y=3312.63), colour="blue") + #add the biomass at 18 years
xlab("Years")+
ylab("Female Biomass per km2 of Nursery Habitat")+
labs(color='Natural
Mortality
Rate')
#Figure 14: natural mortality
#Habitat --> habitat + rm ---
Habitat_CR_rm <- filter(model_results, R0==2000, FishedBiomass==0, CR==10, t ==100, Habitat_loss==0, aMat==7, min_age_at_fishing ==2)
#Habitat --> Habitat + rm
ggplot(Habitat_CR_rm) + #plot the data from model_results
aes(x = mr, y = DispersedAdults*4.7)+ #factor: makes the data discrete (grouped) not continuous--choose what the x and y axis is
#facet_grid(.~CR) + #add another element (the facet grid)
theme_bw()+
geom_line(colour="blue") +
#geom_hline(yintercept=631, colour="red") +
geom_hline(yintercept=2850*0.65, colour="red") +
##add the starting biomass
xlab("Instantaneous Natural Mortality Rate (per year)")+
ylab("Juvenile and Adult Fish (Numbers) per km2 ")
View(model_results)
